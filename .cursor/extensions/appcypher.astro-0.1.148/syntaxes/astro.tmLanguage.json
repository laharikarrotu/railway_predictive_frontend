{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Astro",
	"patterns": [
	    {
	        "include": "#non_astro"
	    },
	    {
	        "include": "#numbers"
	    },
	    {
	        "include": "#macros"
	    },
	    {
	        "include": "#multiline_comments"
	    },
	    {
	        "include": "#single_line_comments"
	    },
		{
			"include": "#type_annotation"
		},
	    {
	        "include": "#dot_notation"
	    },
	    {
	        "include": "#keywords"
	    },
	    {
	        "include": "#keyword_operators"
	    },
	    {
	        "include": "#function_calls"
	    },
		{
			"include": "#multiple_declaration"
		},
	    {
	        "include": "#command_notation"
	    },
	    {
	        "include": "#unquoted"
	    },
	    {
			"include": "#multiline_strings"
	    },
	    {
			"include": "#single_line_strings"
	    },
	    {
	        "include": "#regex"
	    },
	    {
	        "include": "#operators"
	    }
	],
	"repository": {
		"non_astro":{
	        "patterns":[
	            {
	                "begin": "^\\s*-\\s+[^>].*",
	                "end": "$",
	                "name": "support.function.macro.astro"
	            }
	        ]
		},
	    "numbers":{
	        "patterns": [
	            {
	                "match": "\\b0x(_?[A-Fa-f0-9])*((\\.(_?[A-Fa-f0-9])+)?(p[+-]?)?[A-Fa-f0-9_]+)?",
	                "name": "constant.numeric.astro"
	            },
	            {
	                "match": "\\b0o(_?[0-8])*((\\.(_?[0-8])+)?(p[+-]?)?[0-8_]+)?",
	                "name": "constant.numeric.astro"
	            },
	            {
	                "match": "\\b0b(_?[01])*((\\.(_?[01])+)?(p[+-]?)?[01_]+)?",
	                "name": "constant.numeric.astro"
	            },
	            {
	                "match": "\\b[0-9](_?[0-9])*((\\.(_?[0-9])+)?(e[+-]?)?(_?[0-9])+)?",
	                "name": "constant.numeric.astro"
	            }
	        ]
		},
	    "macros":{
	        "patterns":[
	            {
	                "match": "@(?:[A-Za-z_][_A-Za-z0-9]*)|@\\(.+\\)",
	                "name": "support.function.macro.astro"
	            }
	        ]
		},
	    "multiline_comments":{
	        "patterns": [
	            {
	                "begin": "#-",
	                "beginCaptures":{
	                    "0":{ "name": "punctuation.definition.comment.begin.astro"}},
	                "end": "-#",
	                "endCaptures":{
	                    "0":{"name": "punctuation.definition.comment.end.astro"}},
	                "name": "comment.block.astro",
	                "patterns": [
	                    {
	                        "include": "#multiline_comments"
	                    }
	                ]
	            }
			]
		},
		"single_line_comments":{
			"patterns": [
	            {
	                "begin": "#",
	                "beginCaptures":{
	                    "0":{
	                        "name": "punctuation.definition.comment.astro"}},
	                "end": "$",
	                "name": "comment.line.astro"
	            }
	        ]
		},
	    "type_annotation":{
	        "patterns": [
				{
					"begin": "(?<=^|:|=)\\s*(::|>:|<:)",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.astro"}
					},
					"end": "(?=;|$)",
	                "name": "comment.line.astro"
				}
	        ]
		},
	    "dot_notation":{
	        "patterns": [
				{
					"match": "(?<!\\.)((\\.|:)[A-Za-z_][_A-Za-z0-9]*!?(\\.(?![.A-Za-z_0-9]))?)",
					"captures": {
						"1": {
							"name": "variable.language.astro"}
					}
				}
	        ]
		},
	    "keywords":{
	        "patterns": [
	            {
	                "match": "\\b(true|false|nil|NaN)\\b",
	                "name": "constant.language.astro"
	            },
	            {
	                "match": "\\b(?:try!|(for|end|if|\\?|else|elif|async|await|return|delegate|yield|from|while|do|loop|try|ensure|raise|continue|break|fallthrough|pass|except)\\b)",
	                "name": "keyword.control.astro"
	            },
	            {
	                "match": "\\b(?:type|fun|let|var|import|export)\\b",
	                "name": "storage.modifier.astro"
	            }
	        ]
		},
	    "keyword_operators":{
	        "patterns": [
				{
					"match": "\\b(and|or|not|in|is|mod|where|iso|ref|const|as|typeof)\\b",
					"name": "keyword.control.astro"
				}
			]
		},
	    "function_calls":{
	        "patterns": [
				{
					"match": "([A-Za-z_][_A-Za-z0-9]*)!?\\.?(?=(\\{.+\\}\\s*)?\\()",
					"name": "entity.name.function.astro"
				},
				{
					"match": ":(?=\\()",
					"name": "entity.name.function.astro"
				}
	        ]
		},
		"multiple_declaration":{
	        "patterns": [
				{
					"match": "([A-Za-z_][_A-Za-z0-9]*( (?!and |or |not |in |is |mod |where |iso |ref |const |as |typeof )[A-Za-z_][_A-Za-z0-9]*)+\\s*(?=[+-/*]?\\=))",
					"name": "astro"
				}
	        ]
		},
	    "command_notation":{
	        "patterns":[
				{
					"match": "(?<!let |var |import )(\\b[a-zA-Z_][A-Za-z_0-9]*!?)\\s+(?=[A-Za-z_0-9]+|\"|'|`|@|\\$|\\{|\\[|\\()(?!\\b(and|or|not|in|is|mod|where|iso|ref|const|as|typeof)\\b)",
					"name": "entity.name.function.astro"
				}
	        ]
		},
		"unquoted":{
	        "patterns": [
	            {
	                "match": "(?<=[_a-zA-Z0-9})\\]])'",
	                "name": "astro"
	            }
	        ]
		},
	    "multiline_strings": {
	        "patterns": [
	            {
	                "begin": "'''",
	                "beginCaptures":{
	                    "0":{
	                        "name": "punctuation.definition.string.begin.astro"}},
	                "end": "'''",
	                "endCaptures":{
	                    "0":{
	                        "name": "punctuation.definition.string.end.astro"}},
	                "name": "string.quoted.single.astro"
	            },
	            {
	                "begin": "\"\"\"",
	                "beginCaptures":{
	                    "0":{
	                        "name": "punctuation.definition.string.begin.astro"}},
	                "end": "\"\"\"",
	                "endCaptures":{
	                    "0":{
	                        "name": "punctuation.definition.string.end.astro"}},
	                "name": "string.quoted.double.astro"
	            }
	        ]
		},
	    "single_line_strings":{
	        "patterns": [
	            {
	                "begin": "'",
	                "beginCaptures":{
	                    "0":{
	                        "name": "punctuation.definition.string.begin.astro"}},
	                "end": "'",
	                "endCaptures":{
	                    "0":{
	                        "name": "punctuation.definition.string.end.astro"}},
	                "name": "string.quoted.single.astro",
	                "patterns": [
	                    {
	                        "include": "#string_escaped_chars"
	                    },
	                    {
	                        "include": "#string_interpolate"
	                    }
	                ]
	            },
	            {
	                "begin": "\"",
	                "beginCaptures":{
	                    "0":{
	                        "name": "punctuation.definition.string.begin.astro"}},
	                "end": "\"",
	                "endCaptures":{
	                    "0":{
	                        "name": "punctuation.definition.string.end.astro"}},
	                "name": "string.quoted.double.astro",
	                "patterns": [
	                    {
	                        "include": "#string_escaped_chars"
	                    },
	                    {
	                        "include": "#string_interpolate"
	                    }
	                ]
	            }
	        ]
		},
	    "string_escaped_chars":{
	        "patterns": [
	            {
	                "match": "\\\\(t|n|r|b|q|\"|'|\\$|\\\\)",
	                "name": "constant.character.escape.astro"
	            }
	        ]
		},
	    "string_interpolate":{
	        "patterns": [
	            {
	                "begin": "\\$(|.+|)?\\{",
	                "end": "\\}",
	                "name": "constant.character.escape.astro",
	                "patterns": [
	                    {
	                        "include": "$self"
	                    }
	                ]
	            },
	            {
	                "match": "\\$[A-Za-z0-9_]+",
	                "name": "constant.character.escape.astro"
	            }
	        ]
		},
	    "regex":{
	        "patterns": [
	            {
	                "begin": "`",
	                "end": "`",
	                "name": "string.regexp.astro",
	                "patterns": [
	                    {
	                        "include": "#regex_escaped_chars"
	                    }
	                ]
	            }
	        ]
		},
	    "regex_escaped_chars":{
	        "patterns": [
	            {
	                "match": "\\\\.",
	                "name": "constant.character.escape.astro"
	            }
	        ]
		},
	    "operators":{
	        "patterns": [
				{
					"match": "\\.?(=|\\||\\&|\\>|\\<|!|\\+|-|\\*|\\/|\\^|%|\\?|≥|≤|≠|≈|×|±|÷)+",
					"name": "keyword.operator.astro"
				}
			]
		}
	},
	"scopeName": "source.astro",
	"they_share_a": "helo"
}

